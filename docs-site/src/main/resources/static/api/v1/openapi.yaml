openapi: 3.0.0
info:
  title: Global Payments API
  description: |
    A comprehensive API for processing various types of payments, managing customers, and handling billing.
    
    ## Authentication
    All API requests require authentication using API keys passed in the `Authorization` header:
    ```
    ```
    
    ## Rate Limiting
    - Standard tier: 1000 requests per minute
    - Premium tier: 5000 requests per minute
    
    ## Idempotency
    POST requests support idempotency keys to prevent duplicate operations.
  version: 1.0.0
  contact:
    name: Global Payments API Support
    email: api-support@globalpayments.com
    url: https://docs.globalpayments.com
servers:
  - url: https://api.globalpayments.com/v1
    description: Production server
  - url: https://sandbox-api.globalpayments.com/v1
    description: Sandbox server
security:
  - bearerAuth: []
paths:
  /payments:
    post:
      summary: Create a Payment
      description: |
        Creates a new payment transaction. Supports multiple payment methods including credit cards, 
        digital wallets, net banking, and buy-now-pay-later options.
        
        **Important Notes:**
        - All amounts are in the smallest currency unit (cents for USD, paise for INR)
        - Use idempotency keys to prevent duplicate charges
        - 3D Secure authentication is automatically triggered for eligible transactions
      operationId: create-payment
      tags: [Payments]
      parameters:
        - name: Idempotency-Key
          in: header
          description: Unique key to prevent duplicate requests
          required: false
          schema:
            type: string
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
            examples:
              credit_card_payment:
                summary: Credit Card Payment
                value:
                  amount: 2500
                  currency: "USD"
                  description: "Order #12345 - Premium subscription"
                  merchant_info:
                    merchant_id: "merchant_123"
                    terminal_id: "terminal_456"
                    merchant_category_code: "5734"
                  payment_method:
                    type: "credit_card"
                    card:
                      card_number: "4111111111111111"
                      expiry_month: 12
                      expiry_year: 2025
                      cvc: "123"
                      cardholder_name: "John Doe"
                  customer:
                    customer_id: "cust_123"
                    email: "john@example.com"
                    phone: "+1234567890"
                  capture: true
                  metadata:
                    order_id: "12345"
                    customer_segment: "premium"
      responses:
        '201':
          description: Payment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
              examples:
                successful_payment:
                  summary: Successful Payment
                  value:
                    id: "pay_1234567890"
                    status: "succeeded"
                    amount: 2500
                    currency: "USD"
                    description: "Order #12345 - Premium subscription"
                    created_at: "2024-01-15T10:30:00Z"
                    payment_method:
                      type: "credit_card"
                      card:
                        last4: "1111"
                        brand: "visa"
                        exp_month: 12
                        exp_year: 2025
                    receipt_url: "https://receipts.globalpayments.com/pay_1234567890"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '402':
          $ref: '#/components/responses/PaymentRequired'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: List Payments
      description: |
        Retrieves a list of payments with optional filtering and pagination.
        Results are returned in reverse chronological order (newest first).
      operationId: list-payments
      tags: [Payments]
      parameters:
        - name: limit
          in: query
          description: Number of payments to return (1-100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of payments to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter by payment status
          required: false
          schema:
            type: string
            enum: [succeeded, pending, failed, requires_action]
        - name: created_after
          in: query
          description: Filter payments created after this timestamp
          required: false
          schema:
            type: string
            format: date-time
        - name: created_before
          in: query
          description: Filter payments created before this timestamp
          required: false
          schema:
            type: string
            format: date-time
        - name: customer_id
          in: query
          description: Filter by customer ID
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A paginated list of payments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PaymentResponse'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /payments/{paymentId}:
    get:
      summary: Retrieve a Payment
      description: |
        Retrieves the details of a specific payment transaction.
        Includes all payment information, transaction history, and related metadata.
      operationId: get-payment
      tags: [Payments]
      parameters:
        - name: paymentId
          in: path
          required: true
          description: The unique identifier of the payment
          schema:
            type: string
            pattern: '^pay_[a-zA-Z0-9]+$'
      responses:
        '200':
          description: Payment details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /payments/{paymentId}/capture:
    post:
      summary: Capture a Payment
      description: |
        Captures a previously authorized payment. Only payments in 'requires_capture' status can be captured.
        Partial captures are supported by specifying an amount less than the original authorization.
      operationId: capture-payment
      tags: [Payments]
      parameters:
        - name: paymentId
          in: path
          required: true
          description: The unique identifier of the payment to capture
          schema:
            type: string
            pattern: '^pay_[a-zA-Z0-9]+$'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  description: Amount to capture (defaults to full authorized amount)
                  minimum: 1
                description:
                  type: string
                  description: Optional description for the capture
                  maxLength: 500
            examples:
              full_capture:
                summary: Full Capture
                value: {}
              partial_capture:
                summary: Partial Capture
                value:
                  amount: 1500
                  description: "Partial capture for shipped items"
      responses:
        '200':
          description: Payment captured successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /payments/{paymentId}/void:
    post:
      summary: Void a Payment
      description: |
        Voids a payment that has been authorized but not yet captured.
        This cancels the authorization and releases the hold on the customer's card.
      operationId: void-payment
      tags: [Payments]
      parameters:
        - name: paymentId
          in: path
          required: true
          description: The unique identifier of the payment to void
          schema:
            type: string
            pattern: '^pay_[a-zA-Z0-9]+$'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason for voiding the payment
                  maxLength: 500
            examples:
              void_with_reason:
                summary: Void with Reason
                value:
                  reason: "Customer requested cancellation"
      responses:
        '200':
          description: Payment voided successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /refunds:
    post:
      summary: Create a Refund
      description: |
        Creates a refund for a previously captured payment.
        Supports full and partial refunds. Multiple partial refunds are allowed up to the original payment amount.
      operationId: create-refund
      tags: [Refunds]
      parameters:
        - name: Idempotency-Key
          in: header
          description: Unique key to prevent duplicate refunds
          required: false
          schema:
            type: string
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
            examples:
              full_refund:
                summary: Full Refund
                value:
                  payment_id: "pay_1234567890"
                  reason: "Customer requested refund"
              partial_refund:
                summary: Partial Refund
                value:
                  payment_id: "pay_1234567890"
                  amount: 1000
                  reason: "Partial refund for returned item"
                  metadata:
                    item_id: "item_123"
      responses:
        '201':
          description: Refund created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: List Refunds
      description: |
        Retrieves a list of refunds with optional filtering and pagination.
        Results are returned in reverse chronological order.
      operationId: list-refunds
      tags: [Refunds]
      parameters:
        - name: limit
          in: query
          description: Number of refunds to return (1-100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of refunds to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: payment_id
          in: query
          description: Filter by payment ID
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Filter by refund status
          required: false
          schema:
            type: string
            enum: [pending, succeeded, failed, cancelled]
      responses:
        '200':
          description: A paginated list of refunds
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RefundResponse'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /refunds/{refundId}:
    get:
      summary: Retrieve a Refund
      description: |
        Retrieves the details of a specific refund transaction.
        Includes refund status, amount, and associated payment information.
      operationId: get-refund
      tags: [Refunds]
      parameters:
        - name: refundId
          in: path
          required: true
          description: The unique identifier of the refund
          schema:
            type: string
            pattern: '^re_[a-zA-Z0-9]+$'
      responses:
        '200':
          description: Refund details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tokens:
    post:
      summary: Tokenize Card
      description: |
        Creates a secure token for a credit card that can be used for future payments.
        The original card details are securely stored and replaced with a token.
      operationId: tokenize-card
      tags: [Cards & Tokens]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenizeRequest'
            examples:
              tokenize_card:
                summary: Tokenize Credit Card
                value:
                  card:
                    card_number: "4111111111111111"
                    expiry_month: 12
                    expiry_year: 2025
                    cvc: "123"
                    cardholder_name: "John Doe"
                  billing_address:
                    line1: "123 Main St"
                    city: "New York"
                    state: "NY"
                    postal_code: "10001"
                    country: "US"
      responses:
        '201':
          description: Token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /customers:
    post:
      summary: Create Customer
      description: |
        Creates a new customer record with optional payment method storage.
        Customers can have multiple saved payment methods for future transactions.
      operationId: create-customer
      tags: [Cards & Tokens]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
            examples:
              create_customer_with_card:
                summary: Create Customer with Card
                value:
                  email: "john@example.com"
                  phone: "+1234567890"
                  name: "John Doe"
                  description: "Premium customer"
                  billing_address:
                    line1: "123 Main St"
                    city: "New York"
                    state: "NY"
                    postal_code: "10001"
                    country: "US"
                  payment_method:
                    type: "credit_card"
                    card:
                      card_number: "4111111111111111"
                      expiry_month: 12
                      expiry_year: 2025
                      cvc: "123"
                      cardholder_name: "John Doe"
                  metadata:
                    customer_segment: "premium"
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /customers/{customerId}/cards:
    get:
      summary: List Customer Cards
      description: |
        Retrieves all saved payment methods for a specific customer.
        Returns tokenized card information without sensitive details.
      operationId: get-customer-cards
      tags: [Cards & Tokens]
      parameters:
        - name: customerId
          in: path
          required: true
          description: The unique identifier of the customer
          schema:
            type: string
            pattern: '^cust_[a-zA-Z0-9]+$'
      responses:
        '200':
          description: List of customer's saved cards
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SavedCardResponse'
                  customer_id:
                    type: string
                    description: The customer ID
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /wallets/topup:
    post:
      summary: Top-up Wallet
      description: |
        Adds funds to a customer's wallet using a payment method.
        Supports various funding sources including cards and bank transfers.
      operationId: topup-wallet
      tags: [Wallet]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletTopupRequest'
            examples:
              topup_with_card:
                summary: Top-up with Credit Card
                value:
                  wallet_id: "wallet_123"
                  amount: 5000
                  currency: "USD"
                  payment_method:
                    type: "credit_card"
                    card:
                      card_number: "4111111111111111"
                      expiry_month: 12
                      expiry_year: 2025
                      cvc: "123"
                      cardholder_name: "John Doe"
      responses:
        '200':
          description: Wallet topped up successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletTopupResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /wallets/{walletId}/balance:
    get:
      summary: Get Wallet Balance
      description: |
        Retrieves the current balance and transaction history for a specific wallet.
        Includes available balance, pending transactions, and recent activity.
      operationId: get-wallet-balance
      tags: [Wallet]
      parameters:
        - name: walletId
          in: path
          required: true
          description: The unique identifier of the wallet
          schema:
            type: string
            pattern: '^wallet_[a-zA-Z0-9]+$'
      responses:
        '200':
          description: Wallet balance retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletBalanceResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /invoices:
    post:
      summary: Create Invoice
      description: |
        Creates a new invoice for billing purposes.
        Supports line items, tax calculations, and multiple payment options.
      operationId: create-invoice
      tags: [Invoicing]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvoiceRequest'
            examples:
              create_invoice:
                summary: Create Invoice
                value:
                  customer_id: "cust_123"
                  description: "Monthly subscription"
                  currency: "USD"
                  due_date: "2024-02-15"
                  line_items:
                    - description: "Premium Plan"
                      quantity: 1
                      unit_price: 2999
                      tax_rate: 0.08
                  metadata:
                    subscription_id: "sub_123"
      responses:
        '201':
          description: Invoice created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: List Invoices
      description: |
        Retrieves a list of invoices with optional filtering and pagination.
        Results are returned in reverse chronological order.
      operationId: list-invoices
      tags: [Invoicing]
      parameters:
        - name: limit
          in: query
          description: Number of invoices to return (1-100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of invoices to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter by invoice status
          required: false
          schema:
            type: string
            enum: [draft, open, paid, void, uncollectible]
        - name: customer_id
          in: query
          description: Filter by customer ID
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A paginated list of invoices
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InvoiceResponse'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /invoices/{invoiceId}:
    get:
      summary: Get Invoice
      description: |
        Retrieves the details of a specific invoice.
        Includes line items, payment history, and current status.
      operationId: get-invoice
      tags: [Invoicing]
      parameters:
        - name: invoiceId
          in: path
          required: true
          description: The unique identifier of the invoice
          schema:
            type: string
            pattern: '^inv_[a-zA-Z0-9]+$'
      responses:
        '200':
          description: Invoice details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /invoices/{invoiceId}/send:
    post:
      summary: Send Invoice
      description: |
        Sends an invoice to the customer via email.
        Includes a payment link and PDF attachment.
      operationId: send-invoice
      tags: [Invoicing]
      parameters:
        - name: invoiceId
          in: path
          required: true
          description: The unique identifier of the invoice
          schema:
            type: string
            pattern: '^inv_[a-zA-Z0-9]+$'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Override email address (uses customer email if not provided)
                message:
                  type: string
                  description: Custom message to include in the email
                  maxLength: 1000
            examples:
              send_invoice:
                summary: Send Invoice
                value:
                  message: "Please find your invoice attached. Payment is due within 30 days."
      responses:
        '200':
          description: Invoice sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  sent_at:
                    type: string
                    format: date-time
                    description: Timestamp when the invoice was sent
                  email:
                    type: string
                    format: email
                    description: Email address where the invoice was sent
                  message:
                    type: string
                    description: Success message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /plans:
    post:
      summary: Create Plan
      description: |
        Creates a new subscription plan with pricing and billing configuration.
        Plans define the recurring billing structure for subscriptions.
      operationId: create-plan
      tags: [Billing & Subscriptions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlanRequest'
            examples:
              create_plan:
                summary: Create Monthly Plan
                value:
                  name: "Premium Monthly"
                  description: "Premium features with monthly billing"
                  amount: 2999
                  currency: "USD"
                  interval: "month"
                  interval_count: 1
                  trial_period_days: 14
                  metadata:
                    features: "premium"
      responses:
        '201':
          description: Plan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /subscriptions:
    post:
      summary: Create Subscription
      description: |
        Creates a new subscription for a customer using an existing plan.
        Handles trial periods, prorations, and initial payment collection.
      operationId: create-subscription
      tags: [Billing & Subscriptions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscriptionRequest'
            examples:
              create_subscription:
                summary: Create Subscription
                value:
                  customer_id: "cust_123"
                  plan_id: "plan_456"
                  payment_method: "card_789"
                  trial_end: "2024-02-15T00:00:00Z"
                  metadata:
                    source: "website"
      responses:
        '201':
          description: Subscription created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /subscriptions/{subscriptionId}:
    get:
      summary: Get Subscription
      description: |
        Retrieves the details of a specific subscription.
        Includes billing history, current status, and next billing date.
      operationId: get-subscription
      tags: [Billing & Subscriptions]
      parameters:
        - name: subscriptionId
          in: path
          required: true
          description: The unique identifier of the subscription
          schema:
            type: string
            pattern: '^sub_[a-zA-Z0-9]+$'
      responses:
        '200':
          description: Subscription details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    PaymentRequest:
      type: object
      required: [amount, currency, payment_method]
      properties:
        amount:
          type: integer
          description: Amount in the smallest currency unit (e.g., cents for USD)
          minimum: 1
          maximum: 99999999
        currency:
          type: string
          description: 3-letter ISO currency code
          pattern: '^[A-Z]{3}$'
        description:
          type: string
          description: Description of the payment
          maxLength: 500
        capture:
          type: boolean
          description: Whether to capture the payment immediately
          default: true
        merchant_info:
          $ref: '#/components/schemas/MerchantInfo'
        payment_method:
          $ref: '#/components/schemas/PaymentMethod'
        customer:
          $ref: '#/components/schemas/CustomerDetails'
        shipping_address:
          $ref: '#/components/schemas/Address'
        metadata:
          type: object
          description: Additional metadata for the payment
          additionalProperties: true

    PaymentResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique payment identifier
          pattern: '^pay_[a-zA-Z0-9]+$'
        status:
          type: string
          enum: [succeeded, pending, failed, requires_action, requires_capture, cancelled]
          description: Current status of the payment
        amount:
          type: integer
          description: Payment amount in smallest currency unit
        currency:
          type: string
          description: 3-letter ISO currency code
        description:
          type: string
          description: Payment description
        created_at:
          type: string
          format: date-time
          description: Payment creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Payment last update timestamp
        payment_method:
          $ref: '#/components/schemas/PaymentMethodResponse'
        customer:
          $ref: '#/components/schemas/CustomerDetails'
        receipt_url:
          type: string
          format: uri
          description: URL to the payment receipt
        metadata:
          type: object
          description: Additional metadata
          additionalProperties: true

    RefundRequest:
      type: object
      required: [payment_id]
      properties:
        payment_id:
          type: string
          description: ID of the payment to refund
          pattern: '^pay_[a-zA-Z0-9]+$'
        amount:
          type: integer
          description: Amount to refund (defaults to full payment amount)
          minimum: 1
        reason:
          type: string
          description: Reason for the refund
          maxLength: 500
        metadata:
          type: object
          description: Additional metadata for the refund
          additionalProperties: true

    RefundResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique refund identifier
          pattern: '^re_[a-zA-Z0-9]+$'
        payment_id:
          type: string
          description: ID of the original payment
        amount:
          type: integer
          description: Refund amount in smallest currency unit
        currency:
          type: string
          description: 3-letter ISO currency code
        status:
          type: string
          enum: [pending, succeeded, failed, cancelled]
          description: Current status of the refund
        reason:
          type: string
          description: Reason for the refund
        created_at:
          type: string
          format: date-time
          description: Refund creation timestamp
        metadata:
          type: object
          description: Additional metadata
          additionalProperties: true

    TokenizeRequest:
      type: object
      required: [card]
      properties:
        card:
          $ref: '#/components/schemas/CardDetails'
        billing_address:
          $ref: '#/components/schemas/Address'

    TokenResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique token identifier
          pattern: '^tok_[a-zA-Z0-9]+$'
        card:
          $ref: '#/components/schemas/CardDetailsResponse'
        created_at:
          type: string
          format: date-time
          description: Token creation timestamp

    CreateCustomerRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
          description: Customer email address
        phone:
          type: string
          description: Customer phone number
        name:
          type: string
          description: Customer full name
          maxLength: 100
        description:
          type: string
          description: Customer description
          maxLength: 500
        billing_address:
          $ref: '#/components/schemas/Address'
        payment_method:
          $ref: '#/components/schemas/PaymentMethod'
        metadata:
          type: object
          description: Additional metadata
          additionalProperties: true

    CustomerResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique customer identifier
          pattern: '^cust_[a-zA-Z0-9]+$'
        email:
          type: string
          format: email
          description: Customer email address
        phone:
          type: string
          description: Customer phone number
        name:
          type: string
          description: Customer full name
        description:
          type: string
          description: Customer description
        billing_address:
          $ref: '#/components/schemas/Address'
        created_at:
          type: string
          format: date-time
          description: Customer creation timestamp
        metadata:
          type: object
          description: Additional metadata
          additionalProperties: true

    SavedCardResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique card identifier
          pattern: '^card_[a-zA-Z0-9]+$'
        last4:
          type: string
          description: Last 4 digits of the card
        brand:
          type: string
          description: Card brand
          enum: [visa, mastercard, amex, discover, jcb, diners, unionpay]
        exp_month:
          type: integer
          description: Expiration month
          minimum: 1
          maximum: 12
        exp_year:
          type: integer
          description: Expiration year
          minimum: 2024
        cardholder_name:
          type: string
          description: Name on the card
        is_default:
          type: boolean
          description: Whether this is the default payment method
        created_at:
          type: string
          format: date-time
          description: Card creation timestamp

    WalletTopupRequest:
      type: object
      required: [wallet_id, amount, currency, payment_method]
      properties:
        wallet_id:
          type: string
          description: Wallet identifier
          pattern: '^wallet_[a-zA-Z0-9]+$'
        amount:
          type: integer
          description: Amount to add to wallet
          minimum: 1
        currency:
          type: string
          description: 3-letter ISO currency code
          pattern: '^[A-Z]{3}$'
        payment_method:
          $ref: '#/components/schemas/PaymentMethod'
        description:
          type: string
          description: Description of the top-up
          maxLength: 500

    WalletTopupResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique top-up transaction identifier
        wallet_id:
          type: string
          description: Wallet identifier
        amount:
          type: integer
          description: Top-up amount
        currency:
          type: string
          description: Currency code
        status:
          type: string
          enum: [pending, completed, failed]
          description: Top-up status
        created_at:
          type: string
          format: date-time
          description: Top-up creation timestamp
        balance_after:
          type: integer
          description: Wallet balance after top-up

    WalletBalanceResponse:
      type: object
      properties:
        wallet_id:
          type: string
          description: Wallet identifier
        available_balance:
          type: integer
          description: Available balance
        pending_balance:
          type: integer
          description: Pending balance
        currency:
          type: string
          description: Currency code
        last_transaction_at:
          type: string
          format: date-time
          description: Last transaction timestamp
        recent_transactions:
          type: array
          description: Recent transactions
          items:
            $ref: '#/components/schemas/WalletTransaction'

    WalletTransaction:
      type: object
      properties:
        id:
          type: string
          description: Transaction identifier
        type:
          type: string
          enum: [credit, debit]
          description: Transaction type
        amount:
          type: integer
          description: Transaction amount
        description:
          type: string
          description: Transaction description
        created_at:
          type: string
          format: date-time
          description: Transaction timestamp

    CreateInvoiceRequest:
      type: object
      required: [customer_id, currency, line_items]
      properties:
        customer_id:
          type: string
          description: Customer identifier
          pattern: '^cust_[a-zA-Z0-9]+$'
        description:
          type: string
          description: Invoice description
          maxLength: 500
        currency:
          type: string
          description: 3-letter ISO currency code
          pattern: '^[A-Z]{3}$'
        due_date:
          type: string
          format: date
          description: Invoice due date
        line_items:
          type: array
          description: Invoice line items
          items:
            $ref: '#/components/schemas/LineItem'
        tax_percent:
          type: number
          description: Tax percentage (0-100)
          minimum: 0
          maximum: 100
        metadata:
          type: object
          description: Additional metadata
          additionalProperties: true

    LineItem:
      type: object
      required: [description, quantity, unit_price]
      properties:
        description:
          type: string
          description: Item description
          maxLength: 200
        quantity:
          type: integer
          description: Item quantity
          minimum: 1
        unit_price:
          type: integer
          description: Unit price in smallest currency unit
          minimum: 0
        tax_rate:
          type: number
          description: Tax rate for this item (0-1)
          minimum: 0
          maximum: 1

    InvoiceResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique invoice identifier
          pattern: '^inv_[a-zA-Z0-9]+$'
        customer_id:
          type: string
          description: Customer identifier
        description:
          type: string
          description: Invoice description
        currency:
          type: string
          description: Currency code
        status:
          type: string
          enum: [draft, open, paid, void, uncollectible]
          description: Invoice status
        amount_due:
          type: integer
          description: Amount due
        amount_paid:
          type: integer
          description: Amount paid
        subtotal:
          type: integer
          description: Subtotal before tax
        tax:
          type: integer
          description: Tax amount
        total:
          type: integer
          description: Total amount
        due_date:
          type: string
          format: date
          description: Due date
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        line_items:
          type: array
          description: Invoice line items
          items:
            $ref: '#/components/schemas/LineItem'
        payment_url:
          type: string
          format: uri
          description: Payment URL for customers
        pdf_url:
          type: string
          format: uri
          description: PDF download URL
        metadata:
          type: object
          description: Additional metadata
          additionalProperties: true

    CreatePlanRequest:
      type: object
      required: [name, amount, currency, interval]
      properties:
        name:
          type: string
          description: Plan name
          maxLength: 100
        description:
          type: string
          description: Plan description
          maxLength: 500
        amount:
          type: integer
          description: Plan amount in smallest currency unit
          minimum: 1
        currency:
          type: string
          description: 3-letter ISO currency code
          pattern: '^[A-Z]{3}$'
        interval:
          type: string
          enum: [day, week, month, year]
          description: Billing interval
        interval_count:
          type: integer
          description: Number of intervals between billings
          minimum: 1
          maximum: 365
          default: 1
        trial_period_days:
          type: integer
          description: Trial period in days
          minimum: 0
          maximum: 365
        metadata:
          type: object
          description: Additional metadata
          additionalProperties: true

    PlanResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique plan identifier
          pattern: '^plan_[a-zA-Z0-9]+$'
        name:
          type: string
          description: Plan name
        description:
          type: string
          description: Plan description
        amount:
          type: integer
          description: Plan amount
        currency:
          type: string
          description: Currency code
        interval:
          type: string
          description: Billing interval
        interval_count:
          type: integer
          description: Interval count
        trial_period_days:
          type: integer
          description: Trial period days
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        active:
          type: boolean
          description: Whether the plan is active
        metadata:
          type: object
          description: Additional metadata
          additionalProperties: true

    CreateSubscriptionRequest:
      type: object
      required: [customer_id, plan_id]
      properties:
        customer_id:
          type: string
          description: Customer identifier
          pattern: '^cust_[a-zA-Z0-9]+$'
        plan_id:
          type: string
          description: Plan identifier
          pattern: '^plan_[a-zA-Z0-9]+$'
        payment_method:
          type: string
          description: Payment method identifier
        trial_end:
          type: string
          format: date-time
          description: Trial end timestamp
        prorate:
          type: boolean
          description: Whether to prorate the subscription
          default: true
        metadata:
          type: object
          description: Additional metadata
          additionalProperties: true

    SubscriptionResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique subscription identifier
          pattern: '^sub_[a-zA-Z0-9]+$'
        customer_id:
          type: string
          description: Customer identifier
        plan_id:
          type: string
          description: Plan identifier
        status:
          type: string
          enum: [active, past_due, canceled, unpaid, trialing]
          description: Subscription status
        current_period_start:
          type: string
          format: date-time
          description: Current period start
        current_period_end:
          type: string
          format: date-time
          description: Current period end
        trial_start:
          type: string
          format: date-time
          description: Trial start timestamp
        trial_end:
          type: string
          format: date-time
          description: Trial end timestamp
        canceled_at:
          type: string
          format: date-time
          description: Cancellation timestamp
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        metadata:
          type: object
          description: Additional metadata
          additionalProperties: true

    MerchantInfo:
      type: object
      required: [merchant_id]
      properties:
        merchant_id:
          type: string
          description: Merchant identifier
          maxLength: 50
        terminal_id:
          type: string
          description: Terminal identifier
          maxLength: 50
        merchant_category_code:
          type: string
          description: 4-digit MCC code
          pattern: '^[0-9]{4}$'
        merchant_name:
          type: string
          description: Merchant name
          maxLength: 100
        merchant_url:
          type: string
          format: uri
          description: Merchant website URL

    PaymentMethod:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: [credit_card, wallet, netbanking, bnpl, bank_transfer]
          description: Payment method type
        card:
          $ref: '#/components/schemas/CardDetails'
        wallet:
          $ref: '#/components/schemas/WalletInfo'
        bank_transfer:
          $ref: '#/components/schemas/BankTransferInfo'

    PaymentMethodResponse:
      type: object
      properties:
        type:
          type: string
          enum: [credit_card, wallet, netbanking, bnpl, bank_transfer]
          description: Payment method type
        card:
          $ref: '#/components/schemas/CardDetailsResponse'
        wallet:
          $ref: '#/components/schemas/WalletInfo'

    CardDetails:
      type: object
      required: [card_number, expiry_month, expiry_year]
      properties:
        card_number:
          type: string
          description: Card number (PAN)
          pattern: '^[0-9]{13,19}$'
        expiry_month:
          type: integer
          description: Expiration month (1-12)
          minimum: 1
          maximum: 12
        expiry_year:
          type: integer
          description: Expiration year (4-digit)
          minimum: 2024
        cvc:
          type: string
          description: Card verification code
          pattern: '^[0-9]{3,4}$'
        cardholder_name:
          type: string
          description: Name on the card
          maxLength: 100

    CardDetailsResponse:
      type: object
      properties:
        last4:
          type: string
          description: Last 4 digits of the card
        brand:
          type: string
          description: Card brand
          enum: [visa, mastercard, amex, discover, jcb, diners, unionpay]
        exp_month:
          type: integer
          description: Expiration month
        exp_year:
          type: integer
          description: Expiration year
        cardholder_name:
          type: string
          description: Name on the card
        country:
          type: string
          description: Card issuing country
        funding:
          type: string
          enum: [credit, debit, prepaid]
          description: Card funding type

    WalletInfo:
      type: object
      required: [provider]
      properties:
        provider:
          type: string
          enum: [apple_pay, google_pay, paypal, samsung_pay]
          description: Wallet provider
        wallet_token:
          type: string
          description: Wallet token
        device_id:
          type: string
          description: Device identifier

    BankTransferInfo:
      type: object
      required: [account_number, routing_number]
      properties:
        account_number:
          type: string
          description: Bank account number
        routing_number:
          type: string
          description: Bank routing number
        account_type:
          type: string
          enum: [checking, savings]
          description: Account type
        bank_name:
          type: string
          description: Bank name

    CustomerDetails:
      type: object
      properties:
        customer_id:
          type: string
          description: Customer identifier
        email:
          type: string
          format: email
          description: Customer email
        phone:
          type: string
          description: Customer phone
        name:
          type: string
          description: Customer name
        billing_address:
          $ref: '#/components/schemas/Address'

    Address:
      type: object
      properties:
        line1:
          type: string
          description: Address line 1
          maxLength: 200
        line2:
          type: string
          description: Address line 2
          maxLength: 200
        city:
          type: string
          description: City
          maxLength: 100
        state:
          type: string
          description: State/Province
          maxLength: 100
        postal_code:
          type: string
          description: Postal/ZIP code
          maxLength: 20
        country:
          type: string
          description: 2-letter ISO country code
          pattern: '^[A-Z]{2}$'

    PaginationInfo:
      type: object
      properties:
        limit:
          type: integer
          description: Number of items per page
        offset:
          type: integer
          description: Number of items skipped
        total:
          type: integer
          description: Total number of items
        has_more:
          type: boolean
          description: Whether there are more items

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
            message:
              type: string
              description: Error message
            details:
              type: array
              description: Additional error details
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string
        request_id:
          type: string
          description: Unique request identifier

  responses:
    BadRequest:
      description: Bad request - invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            invalid_amount:
              summary: Invalid Amount
              value:
                error:
                  code: "invalid_amount"
                  message: "Amount must be a positive integer"
                  details:
                    - field: "amount"
                      message: "Must be greater than 0"
                request_id: "req_1234567890"

    Unauthorized:
      description: Unauthorized - invalid API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            invalid_key:
              summary: Invalid API Key
              value:
                error:
                  code: "invalid_api_key"
                  message: "Invalid API key provided"
                request_id: "req_1234567890"

    PaymentRequired:
      description: Payment required - insufficient funds or payment declined
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            card_declined:
              summary: Card Declined
              value:
                error:
                  code: "card_declined"
                  message: "Your card was declined"
                  details:
                    - field: "payment_method"
                      message: "Card declined by issuer"
                request_id: "req_1234567890"

    NotFound:
      description: Not found - resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            payment_not_found:
              summary: Payment Not Found
              value:
                error:
                  code: "payment_not_found"
                  message: "Payment not found"
                request_id: "req_1234567890"

    UnprocessableEntity:
      description: Unprocessable entity - validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            validation_error:
              summary: Validation Error
              value:
                error:
                  code: "validation_error"
                  message: "One or more fields are invalid"
                  details:
                    - field: "card.expiry_month"
                      message: "Must be between 1 and 12"
                    - field: "card.expiry_year"
                      message: "Must be a future year"
                request_id: "req_1234567890"

    TooManyRequests:
      description: Too many requests - rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            rate_limit:
              summary: Rate Limit Exceeded
              value:
                error:
                  code: "rate_limit_exceeded"
                  message: "Too many requests. Please try again later."
                request_id: "req_1234567890"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            server_error:
              summary: Server Error
              value:
                error:
                  code: "internal_error"
                  message: "An unexpected error occurred"
                request_id: "req_1234567890"
